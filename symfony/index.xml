<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Symfonies on Me and the Web</title>
    <link>http://lovelock.github.io/symfony/</link>
    <description>Recent content in Symfonies on Me and the Web</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>frostwong@gmail.com (Frost Wong)</managingEditor>
    <webMaster>frostwong@gmail.com (Frost Wong)</webMaster>
    <copyright>(c) 2013-2015 Frost Wong. All rights reserved.</copyright>
    <lastBuildDate>Sun, 10 Jan 2016 13:19:42 +0800</lastBuildDate>
    <atom:link href="http://lovelock.github.io/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>symfony3</title>
      <link>http://lovelock.github.io/symfony/symfony3-02-installation/</link>
      <pubDate>Sun, 10 Jan 2016 13:19:42 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.github.io/symfony/symfony3-02-installation/</guid>
      <description>

&lt;h2 id=&#34;安装操作系统:8919fb557193e13074fdff43d63fcfdf&#34;&gt;安装操作系统&lt;/h2&gt;

&lt;p&gt;操作系统当然需要Linux，不过如果非要在Windows也不是不可以，只是麻烦一点，我没有尝试。至于发行版，我的观点是个人的开发或者测试环境Debian是最合适的，我的习惯是用Debian的Sid也就是unstable版，软件足够新也足够多，能够很方便的满足各种需求。不建议在实体机上安装，最好用VirtualBox等虚拟机软件安装，如果是用VirtualBox则需要选择桥接的网络模式，如果用VMware Workdstation的话就不必了，Nat就可以了。安装过程这里不再详述，最小化安装即可。本文基于Virtualbox + Vagrant + Debian Sid。如果对Vagrant不了解，可以移步&lt;a href=&#34;http://lovelock.github.io/2015/11/03/vagrant%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/&#34; target=&#34;_blank&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;安装php:8919fb557193e13074fdff43d63fcfdf&#34;&gt;安装PHP&lt;/h2&gt;

&lt;p&gt;我用的是最新的PHP7，相关的包如下图
&lt;img src=&#34;http://7xn2pe.com1.z0.glb.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-01-10%20%E4%B8%8B%E5%8D%881.25.27.png&#34; alt=&#34;PHP7.0安装截图&#34; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意，在我写这篇文章时还没有官方的phpredis和phpmemecached的包，需要自行编译安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;安装nginx:8919fb557193e13074fdff43d63fcfdf&#34;&gt;安装Nginx&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sudo apt-get install nginx&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;安装composer:8919fb557193e13074fdff43d63fcfdf&#34;&gt;安装composer&lt;/h2&gt;

&lt;p&gt;又到了问候GFW的时候了，不要考虑用官方的安装脚本了，最简单粗暴的方式就是直接&lt;a href=&#34;https://getcomposer.org/composer.phar&#34; target=&#34;_blank&#34;&gt;下载&lt;/a&gt;下来&lt;code&gt;composer.phar&lt;/code&gt;这个包。然后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/Downloads
sudo chmod +x composer.phar
sudo ln -s /home/frost/Downloads/composer.phar /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最关键的，要配置上&lt;a href=&#34;http://pkg.phpcomposer.com&#34; target=&#34;_blank&#34;&gt;Packagist/Composer中国全量镜像&lt;/a&gt;提供的镜像地址，建议直接&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;composer config -g repositories.packagist composer http://packagist.phpcomposer.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;h2 id=&#34;安装symfnoy3:8919fb557193e13074fdff43d63fcfdf&#34;&gt;安装Symfnoy3&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo curl -LsS https://symfony.com/installer -o /usr/local/bin/symfony
$ sudo chmod a+x /usr/local/bin/symfony
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行一下&lt;code&gt;symfony&lt;/code&gt;，如果安装正常的话就能看到它的帮助信息了。&lt;/p&gt;

&lt;h2 id=&#34;新建symfony3应用:8919fb557193e13074fdff43d63fcfdf&#34;&gt;新建Symfony3应用&lt;/h2&gt;

&lt;p&gt;首先选定一个目录，我的做法是在Debian虚拟机的&lt;code&gt;/var/www/symfony.dev&lt;/code&gt;目录，然后回到宿主机，修改&lt;code&gt;Vagrantfile&lt;/code&gt;，添加一行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.vm.synced_folder &amp;quot;./Symfony.dev&amp;quot;, &amp;quot;/var/www/symfony.dev&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，如果这样配置，一定要在&lt;code&gt;Vagrantfile&lt;/code&gt;同级目录下，新建一个Symfony.dev目录。在当前目录下执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ vagrant halt
$ vagrant up
$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就又回到了虚拟机了。而且这时你可以在宿主机上用你喜欢的IDE或者边编辑器了。回到&lt;code&gt;/var/www/symfony.dev&lt;/code&gt;目录，执行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ symfony new symfony.dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就会在当前目录下新建一个名为symfony.dev的Symfony项目。&lt;/p&gt;

&lt;h2 id=&#34;配置php-fpm和nginx:8919fb557193e13074fdff43d63fcfdf&#34;&gt;配置PHP-FPM和Nginx&lt;/h2&gt;

&lt;p&gt;Symfony项目可能由于安全上的考虑，使用了依赖操作系统实现的ACL，我也不想关心这个ACL是什么，但如果想简单一点让你的程序马上可以运行，就需要避免这个陷阱。我的做法是修改&lt;code&gt;/etc/php/7.0/fpm/pool.d/www.conf&lt;/code&gt;中的下列字段&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;user = frost
group = frost
listen = /run/php7.0-fpm.socket
listen.owner = frost
listen.group = frost
listen.mode = 0660
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时修改&lt;code&gt;/etc/nginx/nginx.conf&lt;/code&gt;中的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;user frost;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意其中的用户相关的地方我都改成了frost，也就是我在虚拟机中用的用户名。首先要明确，这两个地方的用户设置必须是一致的，通常来说，这样的配置加上相应的vhost设置，应该就可以让Web应用工作了，但对于Symfony这样还不行，或者说因为我用了Vagrant这样还不行。&lt;/p&gt;

&lt;p&gt;因为是一个共享目录，所以权限的设置上可能有一些限制，Symfony3要求&lt;code&gt;symfony.dev/var&lt;/code&gt;目录的权限是777，以便可以正常的写入日志和缓存等文件，但如果我要把它设置成777，宿主机就不乐意了。于是乎就只能让我的当前用户运行Nginx和FPM，这样他们自然对这个目录就有了写权限，变相的解决了这个问题。&lt;/p&gt;

&lt;p&gt;注意生产环境可不能这么乱来，千万不要用可以登录的用户名运行这种程序。一般用nobody或者www-data。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;server {
	listen 80;

	root /var/www/symfony.dev/symfony.dev/web;

	index index.php index.html;

	server_name symfony.dev www.symfony.dev;

	location / {
		try_files $uri /app.php$is_args$args;
	}

	location ~ ^/(app_dev|config)\.php(/|$) {
		fastcgi_pass unix:/run/php7.0-fpm.socket;
		fastcgi_split_path_info ^(.+\.php)(/.*)$;
		include fastcgi_params;
		fastcgi_param  SCRIPT_FILENAME  $realpath_root$fastcgi_script_name;
		fastcgi_param DOCUMENT_ROOT $realpath_root;
	}
    # PROD
	location ~ ^/app\.php(/|$) {
		fastcgi_pass unix:/run/php7.0-fpm.socket;
		fastcgi_split_path_info ^(.+\.php)(/.*)$;
		include fastcgi_params;
		fastcgi_param  SCRIPT_FILENAME  $realpath_root$fastcgi_script_name;
		fastcgi_param DOCUMENT_ROOT $realpath_root;
		internal;
        }

        error_log /var/log/nginx/symfony_error.log;
        access_log /var/log/nginx/symfony_access.log;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意其中的&lt;code&gt;fastcgi_pass&lt;/code&gt;一定要和你实际的设置一样。具体查看&lt;code&gt;/etc/php/7.0/fpm/pool.d/www.conf&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;上面的配置中可以看到我用的是symfony.dev这个域名，在宿主机上配一下hosts，就以访问&lt;a href=&#34;http://symfony.dev&#34; target=&#34;_blank&#34;&gt;http://symfony.dev&lt;/a&gt;了。这时候你会发现是不能正常执行的，因为在&lt;code&gt;web/app_dev.php&lt;/code&gt;中制定了如果不是从&lt;code&gt;127.0.0.1&lt;/code&gt;来的请求就拒绝。所以直接把那段删了就行。&lt;/p&gt;

&lt;p&gt;好了可以进行下一步了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Symfony3学习第一章-简介</title>
      <link>http://lovelock.github.io/symfony/Symfony3-01-introduction/</link>
      <pubDate>Sun, 10 Jan 2016 13:07:27 +0800</pubDate>
      <author>frostwong@gmail.com (Frost Wong)</author>
      <guid>http://lovelock.github.io/symfony/Symfony3-01-introduction/</guid>
      <description>&lt;p&gt;断断续续也看了好几次Symfony框架了，但总没有研究深入，即便如此，每次再看的时候都能比上一次理解的更深入一些。&lt;/p&gt;

&lt;p&gt;这次决定把其他的学习都先放一放，深入的研究一下Symfony的设计思想，还有相关的Bundles,Components等等，达到熟练掌握的程度。&lt;/p&gt;

&lt;p&gt;言归正传，Symfony是什么？&lt;/p&gt;

&lt;p&gt;Symfony是一个『大而全』的PHP框架，一个标准的Symfony安装就几乎可以满足你所有的需求了，包括一个高端的ORM框架doctrine、高效而安全的模板引擎Twig、简单但表达能力强的配置方案yaml、资源管理工具assets等等。如果你说这些东西单拎出来也很强大，我为什么要用它呢？因为Symfony把它们高度解耦，保证单个Bundle的独立性，但又用强大的Service Container把它们强力的结合在一起。如果你知道Laravel，可能也已经知道了Laravel的作者其实是Symfony的粉丝。Symfony的官网还有一篇最初的作者写的『如何写一个PHP框架』，我甚至在想Laravel是不是就是看了这篇教程才写出来的。&lt;/p&gt;

&lt;p&gt;不管怎样，Symfony为PHP开发者提供了一个完整的开发环境，让我们很快就能开发出需要的产品。有人会说这种重量级的框架会让程序运行变的缓慢，但在公司用了号称『性能最好的PHP框架Yaf』之后，我觉得我还是更喜欢PHP写的框架（我还没有接触过Phalcon，可能比Yaf好用一点）。为了获得更好的性能带来的是引入外部组件困难，不支持最新的编程范式（PSR），升级维护不容易。作为开发者，我更倾向于用『开发者友好』而不是『机器友好』的框架，这可能也是国外Ruby比较流行的原因吧。&lt;/p&gt;

&lt;p&gt;本系列文章一方面是自己学习的总结，也为后来人提供一些捷径，不用去读冗长的官方文档了。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>